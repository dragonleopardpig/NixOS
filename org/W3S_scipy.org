#+STARTUP: content
#+PROPERTY: header-args:jupyter-python :session mysession
* SciPy Constants
** Constant Units
#+BEGIN_SRC jupyter-python
from scipy import constants

print(constants.pi)
#+END_SRC

#+RESULTS:
: 3.141592653589793


#+BEGIN_SRC jupyter-python  
from scipy import constants

print(dir(constants)) 
#+END_SRC

#+RESULTS:
: ['Avogadro', 'Boltzmann', 'Btu', 'Btu_IT', 'Btu_th', 'ConstantWarning', 'G', 'Julian_year', 'N_A', 'Planck', 'R', 'Rydberg', 'Stefan_Boltzmann', 'Wien', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '_codata', '_constants', '_obsolete_constants', 'acre', 'alpha', 'angstrom', 'arcmin', 'arcminute', 'arcsec', 'arcsecond', 'astronomical_unit', 'atm', 'atmosphere', 'atomic_mass', 'atto', 'au', 'bar', 'barrel', 'bbl', 'blob', 'c', 'calorie', 'calorie_IT', 'calorie_th', 'carat', 'centi', 'codata', 'constants', 'convert_temperature', 'day', 'deci', 'degree', 'degree_Fahrenheit', 'deka', 'dyn', 'dyne', 'e', 'eV', 'electron_mass', 'electron_volt', 'elementary_charge', 'epsilon_0', 'erg', 'exa', 'exbi', 'femto', 'fermi', 'find', 'fine_structure', 'fluid_ounce', 'fluid_ounce_US', 'fluid_ounce_imp', 'foot', 'g', 'gallon', 'gallon_US', 'gallon_imp', 'gas_constant', 'gibi', 'giga', 'golden', 'golden_ratio', 'grain', 'gram', 'gravitational_constant', 'h', 'hbar', 'hectare', 'hecto', 'horsepower', 'hour', 'hp', 'inch', 'k', 'kgf', 'kibi', 'kilo', 'kilogram_force', 'kmh', 'knot', 'lambda2nu', 'lb', 'lbf', 'light_year', 'liter', 'litre', 'long_ton', 'm_e', 'm_n', 'm_p', 'm_u', 'mach', 'mebi', 'mega', 'metric_ton', 'micro', 'micron', 'mil', 'mile', 'milli', 'minute', 'mmHg', 'mph', 'mu_0', 'nano', 'nautical_mile', 'neutron_mass', 'nu2lambda', 'ounce', 'oz', 'parsec', 'pebi', 'peta', 'physical_constants', 'pi', 'pico', 'point', 'pound', 'pound_force', 'precision', 'proton_mass', 'psi', 'pt', 'quecto', 'quetta', 'ronna', 'ronto', 'short_ton', 'sigma', 'slinch', 'slug', 'speed_of_light', 'speed_of_sound', 'stone', 'survey_foot', 'survey_mile', 'tebi', 'tera', 'test', 'ton_TNT', 'torr', 'troy_ounce', 'troy_pound', 'u', 'unit', 'value', 'week', 'yard', 'year', 'yobi', 'yocto', 'yotta', 'zebi', 'zepto', 'zero_Celsius', 'zetta']

** Metric (SI) Prefixes
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.yotta)    #1e+24
print(constants.zetta)    #1e+21
print(constants.exa)      #1e+18
print(constants.peta)     #1000000000000000.0
print(constants.tera)     #1000000000000.0
print(constants.giga)     #1000000000.0
print(constants.mega)     #1000000.0
print(constants.kilo)     #1000.0
print(constants.hecto)    #100.0
print(constants.deka)     #10.0
print(constants.deci)     #0.1
print(constants.centi)    #0.01
print(constants.milli)    #0.001
print(constants.micro)    #1e-06
print(constants.nano)     #1e-09
print(constants.pico)     #1e-12
print(constants.femto)    #1e-15
print(constants.atto)     #1e-18
print(constants.zepto)    #1e-21 
#+END_SRC

#+RESULTS:
#+begin_example
1e+24
1e+21
1e+18
1000000000000000.0
1000000000000.0
1000000000.0
1000000.0
1000.0
100.0
10.0
0.1
0.01
0.001
1e-06
1e-09
1e-12
1e-15
1e-18
1e-21
#+end_example

** Binary Prefixes
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.kibi)    #1024
print(constants.mebi)    #1048576
print(constants.gibi)    #1073741824
print(constants.tebi)    #1099511627776
print(constants.pebi)    #1125899906842624
print(constants.exbi)    #1152921504606846976
print(constants.zebi)    #1180591620717411303424
print(constants.yobi)    #1208925819614629174706176 
#+END_SRC

#+RESULTS:
: 1024
: 1048576
: 1073741824
: 1099511627776
: 1125899906842624
: 1152921504606846976
: 1180591620717411303424
: 1208925819614629174706176

** Mass
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.gram)        #0.001
print(constants.metric_ton)  #1000.0
print(constants.grain)       #6.479891e-05
print(constants.lb)          #0.45359236999999997
print(constants.pound)       #0.45359236999999997
print(constants.oz)          #0.028349523124999998
print(constants.ounce)       #0.028349523124999998
print(constants.stone)       #6.3502931799999995
print(constants.long_ton)    #1016.0469088
print(constants.short_ton)   #907.1847399999999
print(constants.troy_ounce)  #0.031103476799999998
print(constants.troy_pound)  #0.37324172159999996
print(constants.carat)       #0.0002
print(constants.atomic_mass) #1.66053904e-27
print(constants.m_u)         #1.66053904e-27
print(constants.u)           #1.66053904e-27
#+END_SRC

#+RESULTS:
#+begin_example
0.001
1000.0
6.479891e-05
0.45359236999999997
0.45359236999999997
0.028349523124999998
0.028349523124999998
6.3502931799999995
1016.0469088
907.1847399999999
0.031103476799999998
0.37324172159999996
0.0002
1.6605390666e-27
1.6605390666e-27
1.6605390666e-27
#+end_example

** Angle
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.degree)     #0.017453292519943295
print(constants.arcmin)     #0.0002908882086657216
print(constants.arcminute)  #0.0002908882086657216
print(constants.arcsec)     #4.84813681109536e-06
print(constants.arcsecond)  #4.84813681109536e-06
#+END_SRC

#+RESULTS:
: 0.017453292519943295
: 0.0002908882086657216
: 0.0002908882086657216
: 4.84813681109536e-06
: 4.84813681109536e-06

** Time
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.minute)      #60.0
print(constants.hour)        #3600.0
print(constants.day)         #86400.0
print(constants.week)        #604800.0
print(constants.year)        #31536000.0
print(constants.Julian_year) #31557600.0 
#+END_SRC

#+RESULTS:
: 60.0
: 3600.0
: 86400.0
: 604800.0
: 31536000.0
: 31557600.0

** Length
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.inch)              #0.0254
print(constants.foot)              #0.30479999999999996
print(constants.yard)              #0.9143999999999999
print(constants.mile)              #1609.3439999999998
print(constants.mil)               #2.5399999999999997e-05
print(constants.pt)                #0.00035277777777777776
print(constants.point)             #0.00035277777777777776
print(constants.survey_foot)       #0.3048006096012192
print(constants.survey_mile)       #1609.3472186944373
print(constants.nautical_mile)     #1852.0
print(constants.fermi)             #1e-15
print(constants.angstrom)          #1e-10
print(constants.micron)            #1e-06
print(constants.au)                #149597870691.0
print(constants.astronomical_unit) #149597870691.0
print(constants.light_year)        #9460730472580800.0
print(constants.parsec)            #3.0856775813057292e+16 
#+END_SRC

#+RESULTS:
#+begin_example
0.0254
0.30479999999999996
0.9143999999999999
1609.3439999999998
2.5399999999999997e-05
0.00035277777777777776
0.00035277777777777776
0.3048006096012192
1609.3472186944373
1852.0
1e-15
1e-10
1e-06
149597870700.0
149597870700.0
9460730472580800.0
3.085677581491367e+16
#+end_example

** Pressure
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.atm)         #101325.0
print(constants.atmosphere)  #101325.0
print(constants.bar)         #100000.0
print(constants.torr)        #133.32236842105263
print(constants.mmHg)        #133.32236842105263
print(constants.psi)         #6894.757293168361 
#+END_SRC

#+RESULTS:
: 101325.0
: 101325.0
: 100000.0
: 133.32236842105263
: 133.32236842105263
: 6894.757293168361

** Area
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.hectare) #10000.0
print(constants.acre)    #4046.8564223999992 
#+END_SRC

#+RESULTS:
: 10000.0
: 4046.8564223999992

** Volume
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.liter)            #0.001
print(constants.litre)            #0.001
print(constants.gallon)           #0.0037854117839999997
print(constants.gallon_US)        #0.0037854117839999997
print(constants.gallon_imp)       #0.00454609
print(constants.fluid_ounce)      #2.9573529562499998e-05
print(constants.fluid_ounce_US)   #2.9573529562499998e-05
print(constants.fluid_ounce_imp)  #2.84130625e-05
print(constants.barrel)           #0.15898729492799998
print(constants.bbl)              #0.15898729492799998 
#+END_SRC

#+RESULTS:
: 0.001
: 0.001
: 0.0037854117839999997
: 0.0037854117839999997
: 0.00454609
: 2.9573529562499998e-05
: 2.9573529562499998e-05
: 2.84130625e-05
: 0.15898729492799998
: 0.15898729492799998

** Speed
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.kmh)            #0.2777777777777778
print(constants.mph)            #0.44703999999999994
print(constants.mach)           #340.5
print(constants.speed_of_sound) #340.5
print(constants.knot)           #0.5144444444444445 
#+END_SRC

#+RESULTS:
: 0.2777777777777778
: 0.44703999999999994
: 340.5
: 340.5
: 0.5144444444444445

** Temperature
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.zero_Celsius)      #273.15
print(constants.degree_Fahrenheit) #0.5555555555555556 
#+END_SRC

#+RESULTS:
: 273.15
: 0.5555555555555556

** Energy
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.eV)            #1.6021766208e-19
print(constants.electron_volt) #1.6021766208e-19
print(constants.calorie)       #4.184
print(constants.calorie_th)    #4.184
print(constants.calorie_IT)    #4.1868
print(constants.erg)           #1e-07
print(constants.Btu)           #1055.05585262
print(constants.Btu_IT)        #1055.05585262
print(constants.Btu_th)        #1054.3502644888888
print(constants.ton_TNT)       #4184000000.0 
#+END_SRC

#+RESULTS:
: 1.602176634e-19
: 1.602176634e-19
: 4.184
: 4.184
: 4.1868
: 1e-07
: 1055.05585262
: 1055.05585262
: 1054.3502644888888
: 4184000000.0

** Power
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.hp)         #745.6998715822701
print(constants.horsepower) #745.6998715822701 
#+END_SRC

#+RESULTS:
: 745.6998715822701
: 745.6998715822701

** Force
#+BEGIN_SRC jupyter-python  
from scipy import constants

print(constants.dyn)             #1e-05
print(constants.dyne)            #1e-05
print(constants.lbf)             #4.4482216152605
print(constants.pound_force)     #4.4482216152605
print(constants.kgf)             #9.80665
print(constants.kilogram_force)  #9.80665 
#+END_SRC

#+RESULTS:
: 1e-05
: 1e-05
: 4.4482216152605
: 4.4482216152605
: 9.80665
: 9.80665

* SciPy Optimizers
** Roots of an Equation
#+BEGIN_SRC jupyter-python  
from scipy.optimize import root
from math import cos

def eqn(x):
    x = x.item() #convert x from array back to scalar value
    return x + cos(x)

myroot = root(eqn, 0)

print(myroot.x)
#+END_SRC

#+RESULTS:
: [-0.73908513]


#+BEGIN_SRC jupyter-python  
from scipy.optimize import minimize

def eqn(x):
  return x**2 + x + 2

mymin = minimize(eqn, 0, method='BFGS')

print(mymin)
#+END_SRC

#+RESULTS:
:   message: Optimization terminated successfully.
:   success: True
:    status: 0
:       fun: 1.75
:         x: [-5.000e-01]
:       nit: 2
:       jac: [ 0.000e+00]
:  hess_inv: [[ 5.000e-01]]
:      nfev: 8
:      njev: 4

* SciPy Sparse Data
- Sparse Data :: data set where most of the item values are zero.
- Dense Array :: opposite of a sparse array: most of the values are not zero.
- CSC :: Compressed Sparse Column. For efficient arithmetic, fast column slicing.

- CSR :: Compressed Sparse Row. For fast row slicing, faster matrix vector products

** CSR Matrix
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.sparse import csr_matrix

arr = np.array([0, 0, 0, 0, 0, 1, 1, 0, 2])

print(csr_matrix(arr))

# From the result we can see that there are 3 items with value.

# The 1. item is in row 0 position 5 and has the value 1.
# The 2. item is in row 0 position 6 and has the value 1.
# The 3. item is in row 0 position 8 and has the value 2.

#+END_SRC

#+RESULTS:
:   (0, 5)	1
:   (0, 6)	1
:   (0, 8)	2

** Sparse Matrix Methods
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.sparse import csr_matrix

arr = np.array([[0, 0, 0], [0, 0, 1], [1, 0, 2]])

print(csr_matrix(arr).data)
#+END_SRC

#+RESULTS:
: [1 1 2]


#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.sparse import csr_matrix

arr = np.array([[0, 0, 0], [0, 0, 1], [1, 0, 2]])

print(csr_matrix(arr).count_nonzero())
#+END_SRC

#+RESULTS:
: 3


#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.sparse import csr_matrix

arr = np.array([[0, 0, 0], [0, 0, 1], [1, 0, 2]])

mat = csr_matrix(arr)
mat.eliminate_zeros()

print(mat) 
#+END_SRC

#+RESULTS:
:   (1, 2)	1
:   (2, 0)	1
:   (2, 2)	2


#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.sparse import csr_matrix

arr = np.array([[0, 0, 0], [0, 0, 1], [1, 0, 2]])

mat = csr_matrix(arr)
mat.sum_duplicates()

print(mat)
#+END_SRC

#+RESULTS:
:   (1, 2)	1
:   (2, 0)	1
:   (2, 2)	2


#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.sparse import csr_matrix

arr = np.array([[0, 0, 0], [0, 0, 1], [1, 0, 2]])

newarr = csr_matrix(arr).tocsc()

print(newarr)
#+END_SRC

#+RESULTS:
:   (2, 0)	1
:   (1, 2)	1
:   (2, 2)	2

* Scipy Graphs
** Adjacency Matrix
- Adjacency matrix :: a \(n \times n\) matrix where $n$ is the number of elements in a graph.

- And the values represents the connection between the elements.
** Connected Components
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.sparse.csgraph import connected_components
from scipy.sparse import csr_matrix

arr = np.array([
  [0, 1, 2],
  [1, 0, 0],
  [2, 0, 0]
])

newarr = csr_matrix(arr)

print(connected_components(newarr)) 
#+END_SRC

#+RESULTS:
: (1, array([0, 0, 0], dtype=int32))

** Dijkstra
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.sparse.csgraph import dijkstra
from scipy.sparse import csr_matrix

arr = np.array([
  [0, 1, 2],
  [1, 0, 0],
  [2, 0, 0]
])

newarr = csr_matrix(arr)

print(dijkstra(newarr, return_predecessors=True, indices=0))
#+END_SRC

#+RESULTS:
: (array([0., 1., 2.]), array([-9999,     0,     0], dtype=int32))

** Floyd Warshall
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.sparse.csgraph import floyd_warshall
from scipy.sparse import csr_matrix

arr = np.array([
  [0, 1, 2],
  [1, 0, 0],
  [2, 0, 0]
])

newarr = csr_matrix(arr)

print(floyd_warshall(newarr, return_predecessors=True)) 
#+END_SRC

#+RESULTS:
: (array([[0., 1., 2.],
:        [1., 0., 3.],
:        [2., 3., 0.]]), array([[-9999,     0,     0],
:        [    1, -9999,     0],
:        [    2,     0, -9999]], dtype=int32))

** Bellman Ford
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.sparse.csgraph import bellman_ford
from scipy.sparse import csr_matrix

arr = np.array([
  [0, -1, 2],
  [1, 0, 0],
  [2, 0, 0]
])

newarr = csr_matrix(arr)

print(bellman_ford(newarr, return_predecessors=True, indices=0)) 
#+END_SRC

#+RESULTS:
: (array([ 0., -1.,  2.]), array([-9999,     0,     0], dtype=int32))

** Depth First Order
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.sparse.csgraph import depth_first_order
from scipy.sparse import csr_matrix

arr = np.array([
  [0, 1, 0, 1],
  [1, 1, 1, 1],
  [2, 1, 1, 0],
  [0, 1, 0, 1]
])

newarr = csr_matrix(arr)

print(depth_first_order(newarr, 1)) 
#+END_SRC

#+RESULTS:
: (array([1, 0, 3, 2], dtype=int32), array([    1, -9999,     1,     0], dtype=int32))

** Breadth First Order
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.sparse.csgraph import breadth_first_order
from scipy.sparse import csr_matrix

arr = np.array([
  [0, 1, 0, 1],
  [1, 1, 1, 1],
  [2, 1, 1, 0],
  [0, 1, 0, 1]
])

newarr = csr_matrix(arr)

print(breadth_first_order(newarr, 1)) 
#+END_SRC

#+RESULTS:
: (array([1, 0, 2, 3], dtype=int32), array([    1, -9999,     1,     1], dtype=int32))

* SciPy Spatial Data
** Triangulation
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.spatial import Delaunay
import matplotlib.pyplot as plt

points = np.array([
  [2, 4],
  [3, 4],
  [3, 0],
  [2, 2],
  [4, 1]
])

simplices = Delaunay(points).simplices

plt.triplot(points[:, 0], points[:, 1], simplices)
plt.scatter(points[:, 0], points[:, 1], color='r')

plt.show()
#+END_SRC

#+RESULTS:
[[./.ob-jupyter/c7b3b05af5a4f5832aa564b7fe24c2ef43e9cf23.png]]

** Convex Hull
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.spatial import ConvexHull
import matplotlib.pyplot as plt

points = np.array([
  [2, 4],
  [3, 4],
  [3, 0],
  [2, 2],
  [4, 1],
  [1, 2],
  [5, 0],
  [3, 1],
  [1, 2],
  [0, 2]
])

hull = ConvexHull(points)
hull_points = hull.simplices

plt.scatter(points[:,0], points[:,1])
for simplex in hull_points:
  plt.plot(points[simplex,0], points[simplex,1], 'k-')

plt.show()
#+END_SRC

#+RESULTS:
[[./.ob-jupyter/37a35634a268ce8c7f31cc014120c65302d9f8f5.png]]

** KDTrees
#+BEGIN_SRC jupyter-python  
from scipy.spatial import KDTree

points = [(1, -1), (2, 3), (-2, 3), (2, -3)]

kdtree = KDTree(points)

res = kdtree.query((1, 1))

print(res)
#+END_SRC

#+RESULTS:
: (2.0, 0)

** Distance Matrix
*** Euclidean Distance
#+BEGIN_SRC jupyter-python  
from scipy.spatial.distance import euclidean

p1 = (1, 0)
p2 = (10, 2)

res = euclidean(p1, p2)

print(res)
#+END_SRC

#+RESULTS:
: 9.219544457292887

*** Cityblock Distance (Manhattan Distance)
#+BEGIN_SRC jupyter-python  
from scipy.spatial.distance import cityblock

p1 = (1, 0)
p2 = (10, 2)

res = cityblock(p1, p2)

print(res)
#+END_SRC

#+RESULTS:
: 11

*** Cosine Distance
#+BEGIN_SRC jupyter-python  
from scipy.spatial.distance import cosine

p1 = (1, 0)
p2 = (10, 2)

res = cosine(p1, p2)

print(res)
#+END_SRC

#+RESULTS:
: 0.019419324309079777

*** Hamming Distance
#+BEGIN_SRC jupyter-python  
from scipy.spatial.distance import hamming

p1 = (True, False, True)
p2 = (False, True, True)

res = hamming(p1, p2)

print(res)
#+END_SRC

#+RESULTS:
: 0.6666666666666666

* SciPy Interpolation
** 1D Interpolation
#+BEGIN_SRC jupyter-python  
from scipy.interpolate import interp1d
import numpy as np

xs = np.arange(10)
ys = 2*xs + 1

interp_func = interp1d(xs, ys)

newarr = interp_func(np.arange(2.1, 3, 0.1))

print(newarr)
#+END_SRC

#+RESULTS:
: [5.2 5.4 5.6 5.8 6.  6.2 6.4 6.6 6.8]

** Spline Interpolation
#+BEGIN_SRC jupyter-python  
from scipy.interpolate import UnivariateSpline
import numpy as np

xs = np.arange(10)
ys = xs**2 + np.sin(xs) + 1

interp_func = UnivariateSpline(xs, ys)

newarr = interp_func(np.arange(2.1, 3, 0.1))

print(newarr)
#+END_SRC

#+RESULTS:
: [5.62826474 6.03987348 6.47131994 6.92265019 7.3939103  7.88514634
:  8.39640439 8.92773053 9.47917082]

** Interpolation with Radial Basis Function
#+BEGIN_SRC jupyter-python  
from scipy.interpolate import Rbf
import numpy as np

xs = np.arange(10)
ys = xs**2 + np.sin(xs) + 1

interp_func = Rbf(xs, ys)

newarr = interp_func(np.arange(2.1, 3, 0.1))

print(newarr)
#+END_SRC

#+RESULTS:
: [6.25748981 6.62190817 7.00310702 7.40121814 7.8161443  8.24773402
:  8.69590519 9.16070828 9.64233874]

* SciPy Statistical Significance Tests
** T-Test
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.stats import ttest_ind

v1 = np.random.normal(size=100)
v2 = np.random.normal(size=100)

res = ttest_ind(v1, v2)

print(res)
#+END_SRC

#+RESULTS:
: TtestResult(statistic=0.30077949900442086, pvalue=0.7638982413056166, df=198.0)


#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.stats import ttest_ind

v1 = np.random.normal(size=100)
v2 = np.random.normal(size=100)

res = ttest_ind(v1, v2).pvalue

print(res)
#+END_SRC

#+RESULTS:
: 0.3396830749620574

** KS-Test
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.stats import kstest

v = np.random.normal(size=100)

res = kstest(v, 'norm')

print(res)
#+END_SRC

#+RESULTS:
: KstestResult(statistic=0.12150750931883636, pvalue=0.09592371156527746, statistic_location=-0.07905989677704951, statistic_sign=1)

** Statistical Description of Data
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.stats import describe

v = np.random.normal(size=100)
res = describe(v)

print(res)
#+END_SRC

#+RESULTS:
: DescribeResult(nobs=100, minmax=(-2.2183321144135233, 3.3800301959681147), mean=0.259608490859444, variance=1.0158301811374906, skewness=0.3720192641371613, kurtosis=0.7872982180698336)

** Normality Tests (Skewness and Kurtosis)
#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.stats import skew, kurtosis

v = np.random.normal(size=100)

print(skew(v))
print(kurtosis(v)) 
#+END_SRC

#+RESULTS:
: 0.12671614122709027
: -0.7930927602421178


#+BEGIN_SRC jupyter-python  
import numpy as np
from scipy.stats import normaltest

v = np.random.normal(size=100)

print(normaltest(v)) 
#+END_SRC

#+RESULTS:
: NormaltestResult(statistic=0.6165815902893398, pvalue=0.7347016392727235)


#+BEGIN_SRC jupyter-python  

#+END_SRC

