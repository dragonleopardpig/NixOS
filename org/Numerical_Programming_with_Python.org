#+STARTUP: content
#+PROPERTY: header-args:jupyter-python :session mysession

* Creating Numpy Arrays
** Creation of Arrays with Evenly Spaced Values
#+BEGIN_SRC jupyter-python
import numpy as np

a = np.arange(1, 10)
print(a)

x = range(1, 10)
print(x)    # x is an iterator
print(list(x))

# further arange examples:
x = np.arange(10.4)
print(x)
x = np.arange(0.5, 10.4, 0.8)
print(x)
#+END_SRC
#+RESULTS:
: [1 2 3 4 5 6 7 8 9]
: range(1, 10)
: [1, 2, 3, 4, 5, 6, 7, 8, 9]
: [ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9. 10.]
: [ 0.5  1.3  2.1  2.9  3.7  4.5  5.3  6.1  6.9  7.7  8.5  9.3 10.1]

#+BEGIN_SRC jupyter-python  
np.arange(12.04, 12.84, 0.08)
#+END_SRC
#+RESULTS:
: array([12.04, 12.12, 12.2 , 12.28, 12.36, 12.44, 12.52, 12.6 , 12.68,
:        12.76, 12.84])


#+BEGIN_SRC jupyter-python  
x = np.arange(0.5, 10.4, 0.8, int)
print(x)
#+END_SRC
#+RESULTS:
: [ 0  1  2  3  4  5  6  7  8  9 10 11 12]


#+BEGIN_SRC jupyter-python  
import numpy as np

# 50 values between 1 and 10:
print(np.linspace(1, 10))
# 7 values between 1 and 10:
print(np.linspace(1, 10, 7))
# excluding the endpoint:
print(np.linspace(1, 10, 7, endpoint=False))
#+END_SRC
#+RESULTS:
#+begin_example
[ 1.          1.18367347  1.36734694  1.55102041  1.73469388  1.91836735
  2.10204082  2.28571429  2.46938776  2.65306122  2.83673469  3.02040816
  3.20408163  3.3877551   3.57142857  3.75510204  3.93877551  4.12244898
  4.30612245  4.48979592  4.67346939  4.85714286  5.04081633  5.2244898
  5.40816327  5.59183673  5.7755102   5.95918367  6.14285714  6.32653061
  6.51020408  6.69387755  6.87755102  7.06122449  7.24489796  7.42857143
  7.6122449   7.79591837  7.97959184  8.16326531  8.34693878  8.53061224
  8.71428571  8.89795918  9.08163265  9.26530612  9.44897959  9.63265306
  9.81632653 10.        ]
[ 1.   2.5  4.   5.5  7.   8.5 10. ]
[1.         2.28571429 3.57142857 4.85714286 6.14285714 7.42857143
 8.71428571]
#+end_example


#+BEGIN_SRC jupyter-python  
import numpy as np

samples, spacing = np.linspace(1, 10, retstep=True)
print(spacing)
samples, spacing = np.linspace(1, 10, 20, endpoint=True, retstep=True)
print(spacing)
samples, spacing = np.linspace(1, 10, 20, endpoint=False, retstep=True)
print(spacing)
#+END_SRC
#+RESULTS:
: 0.1836734693877551
: 0.47368421052631576
: 0.45

** Zero-dimensional Arrays in Numpy
#+BEGIN_SRC jupyter-python  
import numpy as np
x = np.array(42)
print("x: ", x)
print("The type of x: ", type(x))
print("The dimension of x:", np.ndim(x))
#+END_SRC
#+RESULTS:
: x:  42
: The type of x:  <class 'numpy.ndarray'>
: The dimension of x: 0

** One-dimensional Arrays
#+BEGIN_SRC jupyter-python  
F = np.array([1, 1, 2, 3, 5, 8, 13, 21])
V = np.array([3.4, 6.9, 99.8, 12.8])
print("F: ", F)
print("V: ", V)
print("Type of F: ", F.dtype)
print("Type of V: ", V.dtype)
print("Dimension of F: ", np.ndim(F))
print("Dimension of V: ", np.ndim(V))
#+END_SRC
#+RESULTS:
: F:  [ 1  1  2  3  5  8 13 21]
: V:  [ 3.4  6.9 99.8 12.8]
: Type of F:  int64
: Type of V:  float64
: Dimension of F:  1
: Dimension of V:  1

** Two- and Multidimensional Arrays
#+BEGIN_SRC jupyter-python  
A = np.array([ [3.4, 8.7, 9.9], 
               [1.1, -7.8, -0.7],
               [4.1, 12.3, 4.8] ])
print(A)
print(A.ndim)
#+END_SRC
#+RESULTS:
: [[ 3.4  8.7  9.9]
:  [ 1.1 -7.8 -0.7]
:  [ 4.1 12.3  4.8]]
: 2


#+BEGIN_SRC jupyter-python  
B = np.array([ [[111, 112], [121, 122]],
               [[211, 212], [221, 222]],
               [[311, 312], [321, 322]] ])
print(B)
print(B.ndim)
#+END_SRC
#+RESULTS:
: [[[111 112]
:   [121 122]]
: 
:  [[211 212]
:   [221 222]]
: 
:  [[311 312]
:   [321 322]]]
: 3

** Shape of an Array
#+BEGIN_SRC jupyter-python  
x = np.array([ [67, 63, 87],
               [77, 69, 59],
               [85, 87, 99],
               [79, 72, 71],
               [63, 89, 93],
               [68, 92, 78] ])

print(np.shape(x))
#+END_SRC
#+RESULTS:
: (6, 3)


#+BEGIN_SRC jupyter-python  
print(x.shape)
#+END_SRC
#+RESULTS:
: (6, 3)


#+BEGIN_SRC jupyter-python  
x.shape = (3, 6)
print(x)
#+END_SRC
#+RESULTS:
: [[67 63 87 77 69 59]
:  [85 87 99 79 72 71]
:  [63 89 93 68 92 78]]


#+BEGIN_SRC jupyter-python  
x.shape = (2, 9)
print(x)
#+END_SRC
#+RESULTS:
: [[67 63 87 77 69 59 85 87 99]
:  [79 72 71 63 89 93 68 92 78]]


#+BEGIN_SRC jupyter-python  
x = np.array(11)
print(np.shape(x))
#+END_SRC
#+RESULTS:
: ()


#+BEGIN_SRC jupyter-python  
B = np.array([ [[111, 112, 113], [121, 122, 123]],
               [[211, 212, 213], [221, 222, 223]],
               [[311, 312, 313], [321, 322, 323]],
               [[411, 412, 413], [421, 422, 423]] ])

print(B.shape)
#+END_SRC
#+RESULTS:
: (4, 2, 3)

** Indexing and Slicing
#+BEGIN_SRC jupyter-python  
F = np.array([1, 1, 2, 3, 5, 8, 13, 21])
# print the first element of F
print(F[0])
# print the last element of F
print(F[-1])
#+END_SRC
#+RESULTS:
: 1
: 21


#+BEGIN_SRC jupyter-python  
A = np.array([ [3.4, 8.7, 9.9], 
               [1.1, -7.8, -0.7],
               [4.1, 12.3, 4.8]])

print(A[1][0])
#+END_SRC
#+RESULTS:
: 1.1


#+BEGIN_SRC jupyter-python  
tmp = A[1]
print(tmp)
print(tmp[0])
#+END_SRC
#+RESULTS:
: [ 1.1 -7.8 -0.7]
: 1.1


#+BEGIN_SRC jupyter-python  
print(A[1, 0])
#+END_SRC
#+RESULTS:
: 1.1


#+BEGIN_SRC jupyter-python  
S = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
print(S[2:5])
print(S[:4])
print(S[6:])
print(S[:])
#+END_SRC
#+RESULTS:
: [2 3 4]
: [0 1 2 3]
: [6 7 8 9]
: [0 1 2 3 4 5 6 7 8 9]


#+BEGIN_SRC jupyter-python  
A = np.array([
[11, 12, 13, 14, 15],
[21, 22, 23, 24, 25],
[31, 32, 33, 34, 35],
[41, 42, 43, 44, 45],
[51, 52, 53, 54, 55]])

print(A[:3, 2:])
#+END_SRC
#+RESULTS:
: [[13 14 15]
:  [23 24 25]
:  [33 34 35]]


#+BEGIN_SRC jupyter-python  
print(A[3:, :])
#+END_SRC
#+RESULTS:
: [[41 42 43 44 45]
:  [51 52 53 54 55]]


#+BEGIN_SRC jupyter-python  
print(A[:, 4:])
#+END_SRC
#+RESULTS:
: [[15]
:  [25]
:  [35]
:  [45]
:  [55]]


#+BEGIN_SRC jupyter-python  
X = np.arange(28).reshape(4, 7)
print(X)
#+END_SRC
#+RESULTS:
: [[ 0  1  2  3  4  5  6]
:  [ 7  8  9 10 11 12 13]
:  [14 15 16 17 18 19 20]
:  [21 22 23 24 25 26 27]]


#+BEGIN_SRC jupyter-python  
print(X[::2, ::3])
#+END_SRC
#+RESULTS:
: [[ 0  3  6]
:  [14 17 20]]


#+BEGIN_SRC jupyter-python  
print(X[::, ::3])
#+END_SRC
#+RESULTS:
: [[ 0  3  6]
:  [ 7 10 13]
:  [14 17 20]
:  [21 24 27]]


#+BEGIN_SRC jupyter-python  
A = np.array(
    [ [ [45, 12, 4], [45, 13, 5], [46, 12, 6] ], 
      [ [46, 14, 4], [45, 14, 5], [46, 11, 5] ], 
      [ [47, 13, 2], [48, 15, 5], [52, 15, 1] ] ])

A[1:3, 0:2]  # equivalent to A[1:3, 0:2, :]
#+END_SRC
#+RESULTS:
: array([[[46, 14,  4],
:         [45, 14,  5]],
: 
:        [[47, 13,  2],
:         [48, 15,  5]]])


#+BEGIN_SRC jupyter-python  
A = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
S = A[2:6]
S[0] = 22
S[1] = 23
print(A)
#+END_SRC
#+RESULTS:
: [ 0  1 22 23  4  5  6  7  8  9]


#+BEGIN_SRC jupyter-python  
A = np.arange(12)
B = A.reshape(3, 4)
A[0] = 42
print(B)
#+END_SRC
#+RESULTS:
: [[42  1  2  3]
:  [ 4  5  6  7]
:  [ 8  9 10 11]]


#+BEGIN_SRC jupyter-python  
np.may_share_memory(A, B)
#+END_SRC
#+RESULTS:
: True

** Creating Arrays with Ones, Zeros and Empty
#+BEGIN_SRC jupyter-python  
import numpy as np

E = np.ones((2,3))
print(E)

F = np.ones((3,4),dtype=int)
print(F)
#+END_SRC
#+RESULTS:
: [[1. 1. 1.]
:  [1. 1. 1.]]
: [[1 1 1 1]
:  [1 1 1 1]
:  [1 1 1 1]]


#+BEGIN_SRC jupyter-python  
Z = np.zeros((2,4))
print(Z)
#+END_SRC
#+RESULTS:
: [[0. 0. 0. 0.]
:  [0. 0. 0. 0.]]


#+BEGIN_SRC jupyter-python  
x = np.array([2,5,18,14,4])
E = np.ones_like(x)
print(E)

Z = np.zeros_like(x)
print(Z)
#+END_SRC
#+RESULTS:
: [1 1 1 1 1]
: [0 0 0 0 0]


#+BEGIN_SRC jupyter-python  
np.empty((2, 4))
#+END_SRC
#+RESULTS:
: array([[0., 0., 0., 0.],
:        [0., 0., 0., 0.]])

** Copying Arrays
#+BEGIN_SRC jupyter-python  
import numpy as np

x = np.array([[42,22,12],[44,53,66]], order='F')
y = x.copy()

x[0,0] = 1001
print(x)

print(y)
#+END_SRC
#+RESULTS:
: [[1001   22   12]
:  [  44   53   66]]
: [[42 22 12]
:  [44 53 66]]


#+BEGIN_SRC jupyter-python  
print(x.flags['C_CONTIGUOUS'])
print(y.flags['C_CONTIGUOUS'])
#+END_SRC
#+RESULTS:
: False
: True


#+BEGIN_SRC jupyter-python  
import numpy as np

x = np.array([[42,22,12],[44,53,66]], order='F')
y = x.copy()
x[0,0] = 1001
print(x)

print(y)

print(x.flags['C_CONTIGUOUS'])
print(y.flags['C_CONTIGUOUS'])
#+END_SRC
#+RESULTS:
: [[1001   22   12]
:  [  44   53   66]]
: [[42 22 12]
:  [44 53 66]]
: False
: True

** Identity Array
#+BEGIN_SRC jupyter-python  
import numpy as np

np.identity(4)
#+END_SRC
#+RESULTS:
: array([[1., 0., 0., 0.],
:        [0., 1., 0., 0.],
:        [0., 0., 1., 0.],
:        [0., 0., 0., 1.]])


#+BEGIN_SRC jupyter-python  
import numpy as np

np.eye(5, 8, k=1, dtype=int)
#+END_SRC
#+RESULTS:
: array([[0, 1, 0, 0, 0, 0, 0, 0],
:        [0, 0, 1, 0, 0, 0, 0, 0],
:        [0, 0, 0, 1, 0, 0, 0, 0],
:        [0, 0, 0, 0, 1, 0, 0, 0],
:        [0, 0, 0, 0, 0, 1, 0, 0]])

* Numpy Data Objects, dtype
** dtype
#+BEGIN_SRC jupyter-python  
import numpy as np

i16 = np.dtype(np.int16)
print(i16)

lst = [ [3.4, 8.7, 9.9], 
        [1.1, -7.8, -0.7],
        [4.1, 12.3, 4.8] ]

A = np.array(lst, dtype=i16)

print(A)
#+END_SRC
#+RESULTS:
: int16
: [[ 3  8  9]
:  [ 1 -7  0]
:  [ 4 12  4]]

** Structured Arrays
#+BEGIN_SRC jupyter-python  
import numpy as np

dt = np.dtype([('density', np.int32)])

x = np.array([(393,), (337,), (256,)],
             dtype=dt)

print(x)

print("\nThe internal representation:")
print(repr(x))
#+END_SRC
#+RESULTS:
: [(393,) (337,) (256,)]
: 
: The internal representation:
: array([(393,), (337,), (256,)], dtype=[('density', '<i4')])


#+BEGIN_SRC jupyter-python  
print(x['density'])
#+END_SRC
#+RESULTS:
: [393 337 256]


#+BEGIN_SRC jupyter-python  
dt = np.dtype([('density', 'i4')])
x = np.array([(393,), (337,), (256,)],
             dtype=dt)
print(x)
#+END_SRC
#+RESULTS:
: [(393,) (337,) (256,)]


#+BEGIN_SRC jupyter-python  
# little-endian ordering
dt = np.dtype('<d')
print(dt.name, dt.byteorder, dt.itemsize)

# big-endian ordering
dt = np.dtype('>d')  
print(dt.name, dt.byteorder, dt.itemsize)

# native byte ordering
dt = np.dtype('d') 
print(dt.name, dt.byteorder, dt.itemsize)
#+END_SRC
#+RESULTS:
: float64 = 8
: float64 > 8
: float64 = 8


#+BEGIN_SRC jupyter-python  
dt = np.dtype([('country', 'S20'), ('density', 'i4'), ('area', 'i4'), ('population', 'i4')])
population_table = np.array([
    ('Netherlands', 393, 41526, 16928800),
    ('Belgium', 337, 30510, 11007020),
    ('United Kingdom', 256, 243610, 62262000),
    ('Germany', 233, 357021, 81799600),
    ('Liechtenstein', 205, 160, 32842),
    ('Italy', 192, 301230, 59715625),
    ('Switzerland', 177, 41290, 7301994),
    ('Luxembourg', 173, 2586, 512000),
    ('France', 111, 547030, 63601002),
    ('Austria', 97, 83858, 8169929),
    ('Greece', 81, 131940, 11606813),
    ('Ireland', 65, 70280, 4581269),
    ('Sweden', 20, 449964, 9515744),
    ('Finland', 16, 338424, 5410233),
    ('Norway', 13, 385252, 5033675)],
    dtype=dt)
print(population_table[:4])
#+END_SRC
#+RESULTS:
: [(b'Netherlands', 393,  41526, 16928800)
:  (b'Belgium', 337,  30510, 11007020)
:  (b'United Kingdom', 256, 243610, 62262000)
:  (b'Germany', 233, 357021, 81799600)]


#+BEGIN_SRC jupyter-python  
print(population_table['density'])
print(population_table['country'])
print(population_table['area'][2:5])
#+END_SRC
#+RESULTS:
: [393 337 256 233 205 192 177 173 111  97  81  65  20  16  13]
: [b'Netherlands' b'Belgium' b'United Kingdom' b'Germany' b'Liechtenstein'
:  b'Italy' b'Switzerland' b'Luxembourg' b'France' b'Austria' b'Greece'
:  b'Ireland' b'Sweden' b'Finland' b'Norway']
: [243610 357021    160]

** Unicode Strings in Array
#+BEGIN_SRC jupyter-python  
dt = np.dtype([('country', np.compat.unicode, 20), 
               ('density', 'i4'), 
               ('area', 'i4'), 
               ('population', 'i4')])
population_table = np.array([
    ('Netherlands', 393, 41526, 16928800),
    ('Belgium', 337, 30510, 11007020),
    ('United Kingdom', 256, 243610, 62262000),
    ('Germany', 233, 357021, 81799600),
    ('Liechtenstein', 205, 160, 32842),
    ('Italy', 192, 301230, 59715625),
    ('Switzerland', 177, 41290, 7301994),
    ('Luxembourg', 173, 2586, 512000),
    ('France', 111, 547030, 63601002),
    ('Austria', 97, 83858, 8169929),
    ('Greece', 81, 131940, 11606813),
    ('Ireland', 65, 70280, 4581269),
    ('Sweden', 20, 449964, 9515744),
    ('Finland', 16, 338424, 5410233),
    ('Norway', 13, 385252, 5033675)],
    dtype=dt)
print(population_table[:4])
#+END_SRC
#+RESULTS:
: [('Netherlands', 393,  41526, 16928800) ('Belgium', 337,  30510, 11007020)
:  ('United Kingdom', 256, 243610, 62262000)
:  ('Germany', 233, 357021, 81799600)]

** Input and Output of Structured Arrays
#+BEGIN_SRC jupyter-python  
np.savetxt("population_table.csv",
           population_table,
           fmt="%s;%d;%d;%d",           
           delimiter=";")
#+END_SRC
#+RESULTS:


#+BEGIN_SRC jupyter-python  
dt = np.dtype([('country', np.compat.unicode, 20), ('density', 'i4'), ('area', 'i4'), ('population', 'i4')])

x = np.genfromtxt("population_table.csv",
               dtype=dt,
               delimiter=";")
#+END_SRC
#+RESULTS:


#+BEGIN_SRC jupyter-python  
dt = np.dtype([('country', np.compat.unicode, 20), ('density', 'i4'), ('area', 'i4'), ('population', 'i4')])

x = np.loadtxt("population_table.csv",
               dtype=dt,
               converters={0: lambda x: x.decode('utf-8')},
               delimiter=";")

print(x)
#+END_SRC
#+RESULTS:
: [('Netherlands', 393,  41526, 16928800) ('Belgium', 337,  30510, 11007020)
:  ('United Kingdom', 256, 243610, 62262000)
:  ('Germany', 233, 357021, 81799600)
:  ('Liechtenstein', 205,    160,    32842) ('Italy', 192, 301230, 59715625)
:  ('Switzerland', 177,  41290,  7301994)
:  ('Luxembourg', 173,   2586,   512000) ('France', 111, 547030, 63601002)
:  ('Austria',  97,  83858,  8169929) ('Greece',  81, 131940, 11606813)
:  ('Ireland',  65,  70280,  4581269) ('Sweden',  20, 449964,  9515744)
:  ('Finland',  16, 338424,  5410233) ('Norway',  13, 385252,  5033675)]

* Numerical Operations on Numpy Arrays
** Using Scalars
#+BEGIN_SRC jupyter-python  
import numpy as np
lst = [2,3, 7.9, 3.3, 6.9, 0.11, 10.3, 12.9]
v = np.array(lst)
v = v + 2
print(v)
#+END_SRC
#+RESULTS:
: [ 4.    5.    9.9   5.3   8.9   2.11 12.3  14.9 ]


#+BEGIN_SRC jupyter-python  
print(v * 2.2)
#+END_SRC
#+RESULTS:
: [ 8.8   11.    21.78  11.66  19.58   4.642 27.06  32.78 ]


#+BEGIN_SRC jupyter-python  
print(v - 1.38)
#+END_SRC
#+RESULTS:
: [ 2.62  3.62  8.52  3.92  7.52  0.73 10.92 13.52]


#+BEGIN_SRC jupyter-python  
print(v ** 2)
print(v ** 1.5)
#+END_SRC
#+RESULTS:
: [ 16.      25.      98.01    28.09    79.21     4.4521 151.29   222.01  ]
: [ 8.         11.18033989 31.14962279 12.2015163  26.55125232  3.06495204
:  43.13776768 57.51477202]


#+BEGIN_SRC jupyter-python  
lst = [2,3, 7.9, 3.3, 6.9, 0.11, 10.3, 12.9]
res = []
for val in lst:
    res.append(val + 2)

print(res)
#+END_SRC
#+RESULTS:
: [4, 5, 9.9, 5.3, 8.9, 2.11, 12.3, 14.9]


#+BEGIN_SRC jupyter-python  
res = [ val + 2 for val in lst]
print(res)
#+END_SRC
#+RESULTS:
: [4, 5, 9.9, 5.3, 8.9, 2.11, 12.3, 14.9]


#+BEGIN_SRC jupyter-python  
v = np.random.randint(0, 100, 1000)

%timeit v + 1
#+END_SRC
#+RESULTS:
: 937 ns ± 6.2 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)


#+BEGIN_SRC jupyter-python  
lst = list(v)

%timeit [ val + 2 for val in lst]
#+END_SRC
#+RESULTS:
: 44.7 µs ± 797 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)

** Arithmetic Operations with two Arrays
#+BEGIN_SRC jupyter-python  
import numpy as np

A = np.array([ [11, 12, 13], [21, 22, 23], [31, 32, 33] ])
B = np.ones((3,3))

print("Adding to arrays: ")
print(A + B)

print("\nMultiplying two arrays: ")
print(A * (B + 1))
#+END_SRC
#+RESULTS:
: Adding to arrays: 
: [[12. 13. 14.]
:  [22. 23. 24.]
:  [32. 33. 34.]]
: 
: Multiplying two arrays: 
: [[22. 24. 26.]
:  [42. 44. 46.]
:  [62. 64. 66.]]

** Matrix Multiplication:
#+BEGIN_SRC jupyter-python  
np.dot(A, B)
#+END_SRC
#+RESULTS:
: array([[36., 36., 36.],
:        [66., 66., 66.],
:        [96., 96., 96.]])


#+BEGIN_SRC jupyter-python  
print(np.dot(3, 4))
x = np.array([3])
y = np.array([4])
print(x.ndim)
print(np.dot(x, y))

x = np.array([3, -2])
y = np.array([-4, 1])
print(np.dot(x, y))
#+END_SRC
#+RESULTS:
: 12
: 1
: 12
: -14


#+BEGIN_SRC jupyter-python  
A = np.array([ [1, 2, 3], 
               [3, 2, 1] ])
B = np.array([ [2, 3, 4, -2], 
               [1, -1, 2, 3],
               [1, 2, 3, 0] ])

# es muss gelten:
print(A.shape[-1] == B.shape[-2], A.shape[1]) 
print(np.dot(A, B))
#+END_SRC
#+RESULTS:
: True 3
: [[ 7  7 17  4]
:  [ 9  9 19  0]]


#+BEGIN_SRC jupyter-python  
import numpy as np
X = np.array( [[[3, 1, 2],
                [4, 2, 2],
                [2, 4, 1]],

               [[3, 2, 2],
                [4, 4, 3],
                [4, 1, 1]],

               [[2, 2, 1],
                [3, 1, 3],
                [3, 2, 3]]])

Y = np.array( [[[2, 3, 1],
                [2, 2, 4],
                [3, 4, 4]],
            
               [[1, 4, 1],
                [4, 1, 2],
                [4, 1, 2]],
            
               [[1, 2, 3],
                [4, 1, 1],
                [3, 1, 4]]])


R = np.dot(X, Y)

print("The shapes:")
print(X.shape)
print(Y.shape)
print(R.shape)

print("\nThe Result R:")
print(R)
#+END_SRC
#+RESULTS:
#+begin_example
The shapes:
(3, 3, 3)
(3, 3, 3)
(3, 3, 3, 3)

The Result R:
[[[[14 19 15]
   [15 15  9]
   [13  9 18]]

  [[18 24 20]
   [20 20 12]
   [18 12 22]]

  [[15 18 22]
   [22 13 12]
   [21  9 14]]]


 [[[16 21 19]
   [19 16 11]
   [17 10 19]]

  [[25 32 32]
   [32 23 18]
   [29 15 28]]

  [[13 18 12]
   [12 18  8]
   [11 10 17]]]


 [[[11 14 14]
   [14 11  8]
   [13  7 12]]

  [[17 23 19]
   [19 16 11]
   [16 10 22]]

  [[19 25 23]
   [23 17 13]
   [20 11 23]]]]
#+end_example


#+BEGIN_SRC jupyter-python  
import numpy as np
X = np.array(
    [[[3, 1, 2],
      [4, 2, 2]],

     [[-1, 0, 1],
      [1, -1, -2]],
     
     [[3, 2, 2],
      [4, 4, 3]],

     [[2, 2, 1],
      [3, 1, 3]]])

Y = np.array(
    [[[2, 3, 1, 2, 1],
      [2, 2, 2, 0, 0],
      [3, 4, 0, 1, -1]],

     [[1, 4, 3, 2, 2],
      [4, 1, 1, 4, -3],
      [4, 1, 0, 3, 0]]])


R = np.dot(X, Y)



print("X.shape: ", X.shape, "   X.ndim: ", X.ndim)
print("Y.shape: ", Y.shape, "   Y.ndim: ", Y.ndim)
print("R.shape: ",     R.shape, "R.ndim: ", R.ndim)


print("\nThe result array R:\n")
print(R)
#+END_SRC
#+RESULTS:
#+begin_example
X.shape:  (4, 2, 3)    X.ndim:  3
Y.shape:  (2, 3, 5)    Y.ndim:  3
R.shape:  (4, 2, 2, 5) R.ndim:  4

The result array R:

[[[[ 14  19   5   8   1]
   [ 15  15  10  16   3]]

  [[ 18  24   8  10   2]
   [ 20  20  14  22   2]]]


 [[[  1   1  -1  -1  -2]
   [  3  -3  -3   1  -2]]

  [[ -6  -7  -1   0   3]
   [-11   1   2  -8   5]]]


 [[[ 16  21   7   8   1]
   [ 19  16  11  20   0]]

  [[ 25  32  12  11   1]
   [ 32  23  16  33  -4]]]


 [[[ 11  14   6   5   1]
   [ 14  11   8  15  -2]]

  [[ 17  23   5   9   0]
   [ 19  16  10  19   3]]]]
#+end_example


#+BEGIN_SRC jupyter-python  
i = 0
for j in range(X.shape[1]):
    for k in range(Y.shape[0]):
        for m in range(Y.shape[2]):
            fmt = "    sum(X[{}, {}, :] * Y[{}, :, {}] :  {}"
            arguments = (i, j, k, m, sum(X[i, j, :] * Y[k, :, m]))
            print(fmt.format(*arguments))
#+END_SRC
#+RESULTS:
#+begin_example
    sum(X[0, 0, :] * Y[0, :, 0] :  14
    sum(X[0, 0, :] * Y[0, :, 1] :  19
    sum(X[0, 0, :] * Y[0, :, 2] :  5
    sum(X[0, 0, :] * Y[0, :, 3] :  8
    sum(X[0, 0, :] * Y[0, :, 4] :  1
    sum(X[0, 0, :] * Y[1, :, 0] :  15
    sum(X[0, 0, :] * Y[1, :, 1] :  15
    sum(X[0, 0, :] * Y[1, :, 2] :  10
    sum(X[0, 0, :] * Y[1, :, 3] :  16
    sum(X[0, 0, :] * Y[1, :, 4] :  3
    sum(X[0, 1, :] * Y[0, :, 0] :  18
    sum(X[0, 1, :] * Y[0, :, 1] :  24
    sum(X[0, 1, :] * Y[0, :, 2] :  8
    sum(X[0, 1, :] * Y[0, :, 3] :  10
    sum(X[0, 1, :] * Y[0, :, 4] :  2
    sum(X[0, 1, :] * Y[1, :, 0] :  20
    sum(X[0, 1, :] * Y[1, :, 1] :  20
    sum(X[0, 1, :] * Y[1, :, 2] :  14
    sum(X[0, 1, :] * Y[1, :, 3] :  22
    sum(X[0, 1, :] * Y[1, :, 4] :  2
#+end_example


#+BEGIN_SRC jupyter-python  
print(R[0])
#+END_SRC
#+RESULTS:
: [[[14 19  5  8  1]
:   [15 15 10 16  3]]
: 
:  [[18 24  8 10  2]
:   [20 20 14 22  2]]]


#+BEGIN_SRC jupyter-python  
R2 = np.zeros(R.shape, dtype=np.int8)

for i in range(X.shape[0]):
    for j in range(X.shape[1]):
        for k in range(Y.shape[0]):
            for m in range(Y.shape[2]):
                R2[i, j, k, m] = sum(X[i, j, :] * Y[k, :, m])


print( np.array_equal(R, R2) )
#+END_SRC
#+RESULTS:
: True

** Matrices vs. Two-Dimensional Arrays
#+BEGIN_SRC jupyter-python  
import numpy as np

A = np.array([ [1, 2, 3], [2, 2, 2], [3, 3, 3] ])
B = np.array([ [3, 2, 1], [1, 2, 3], [-1, -2, -3] ])

R = A * B
print(R)
#+END_SRC
#+RESULTS:
: [[ 3  4  3]
:  [ 2  4  6]
:  [-3 -6 -9]]


#+BEGIN_SRC jupyter-python  
MA = np.mat(A)
MB = np.mat(B)

R = MA * MB
print(R)
#+END_SRC
#+RESULTS:
: [[ 2  0 -2]
:  [ 6  4  2]
:  [ 9  6  3]]

** Comparison Operators
#+BEGIN_SRC jupyter-python  
import numpy as np

A = np.array([ [11, 12, 13], [21, 22, 23], [31, 32, 33] ])
B = np.array([ [11, 102, 13], [201, 22, 203], [31, 32, 303] ])

A == B
#+END_SRC
#+RESULTS:
: array([[ True, False,  True],
:        [False,  True, False],
:        [ True,  True, False]])


#+BEGIN_SRC jupyter-python  
print(np.array_equal(A, B))
print(np.array_equal(A, A))
#+END_SRC
#+RESULTS:
: False
: True

** Logical Operators
#+BEGIN_SRC jupyter-python  
a = np.array([ [True, True], [False, False]])
b = np.array([ [True, False], [True, False]])

print(np.logical_or(a, b))
print(np.logical_and(a, b))
#+END_SRC
#+RESULTS:
: [[ True  True]
:  [ True False]]
: [[ True False]
:  [False False]]

** Broadcasting
#+BEGIN_SRC jupyter-python  
import numpy as np

A = np.array([ [11, 12, 13], [21, 22, 23], [31, 32, 33] ])
B = np.array([1, 2, 3])

print("Multiplication with broadcasting: ")
print(A * B)
print("... and now addition with broadcasting: ")
print(A + B)
#+END_SRC
#+RESULTS:
: Multiplication with broadcasting: 
: [[11 24 39]
:  [21 44 69]
:  [31 64 99]]
: ... and now addition with broadcasting: 
: [[12 14 16]
:  [22 24 26]
:  [32 34 36]]


#+BEGIN_SRC jupyter-python  
B = np.array([[1, 2, 3],] * 3)
print(B)
#+END_SRC
#+RESULTS:
: [[1 2 3]
:  [1 2 3]
:  [1 2 3]]


#+BEGIN_SRC jupyter-python  
B = np.array([1, 2, 3])
B[:, np.newaxis]
#+END_SRC
#+RESULTS:
: array([[1],
:        [2],
:        [3]])


#+BEGIN_SRC jupyter-python  
A * B[:, np.newaxis]
#+END_SRC
#+RESULTS:
: array([[11, 12, 13],
:        [42, 44, 46],
:        [93, 96, 99]])


#+BEGIN_SRC jupyter-python  
np.array([[1, 2, 3],] * 3).transpose()
#+END_SRC
#+RESULTS:
: array([[1, 1, 1],
:        [2, 2, 2],
:        [3, 3, 3]])


#+BEGIN_SRC jupyter-python  
A = np.array([10, 20, 30])
B = np.array([1, 2, 3])
A[:, np.newaxis]
#+END_SRC
#+RESULTS:
: array([[10],
:        [20],
:        [30]])


#+BEGIN_SRC jupyter-python  
A[:, np.newaxis] * B
#+END_SRC
#+RESULTS:
: array([[10, 20, 30],
:        [20, 40, 60],
:        [30, 60, 90]])

** Another Way to Do it
#+BEGIN_SRC jupyter-python  
import numpy as np

A = np.array([ [11, 12, 13], [21, 22, 23], [31, 32, 33] ])

B = np.array([1, 2, 3])

B = B[np.newaxis, :]
B = np.concatenate((B, B, B))

print("Multiplication: ")
print(A * B)
print("... and now addition again: ")
print(A + B)
#+END_SRC
#+RESULTS:
: Multiplication: 
: [[11 24 39]
:  [21 44 69]
:  [31 64 99]]
: ... and now addition again: 
: [[12 14 16]
:  [22 24 26]
:  [32 34 36]]


#+BEGIN_SRC jupyter-python  
import numpy as np

A = np.array([ [11, 12, 13], [21, 22, 23], [31, 32, 33] ])

B = np.tile(np.array([1, 2, 3]), (3, 1))

print(B)

print("Multiplication: ")
print(A * B)
print("... and now addition again: ")
print(A + B)
#+END_SRC
#+RESULTS:
#+begin_example
[[1 2 3]
 [1 2 3]
 [1 2 3]]
Multiplication: 
[[11 24 39]
 [21 44 69]
 [31 64 99]]
... and now addition again: 
[[12 14 16]
 [22 24 26]
 [32 34 36]]
#+end_example

** Distance Matrix
#+BEGIN_SRC jupyter-python  
cities = ["Barcelona", "Berlin", "Brussels", "Bucharest",
          "Budapest", "Copenhagen", "Dublin", "Hamburg", "Istanbul",
          "Kiev", "London", "Madrid", "Milan", "Moscow", "Munich",
          "Paris", "Prague", "Rome", "Saint Petersburg", 
          "Stockholm", "Vienna", "Warsaw"]

dist2barcelona = [0,  1498, 1063, 1968, 
                  1498, 1758, 1469, 1472, 2230, 
                  2391, 1138, 505, 725, 3007, 1055, 
                  833, 1354, 857, 2813, 
                  2277, 1347, 1862]

dists =  np.array(dist2barcelona[:12])
print(dists)
print(np.abs(dists - dists[:, np.newaxis]))
#+END_SRC
#+RESULTS:
#+begin_example
[   0 1498 1063 1968 1498 1758 1469 1472 2230 2391 1138  505]
[[   0 1498 1063 1968 1498 1758 1469 1472 2230 2391 1138  505]
 [1498    0  435  470    0  260   29   26  732  893  360  993]
 [1063  435    0  905  435  695  406  409 1167 1328   75  558]
 [1968  470  905    0  470  210  499  496  262  423  830 1463]
 [1498    0  435  470    0  260   29   26  732  893  360  993]
 [1758  260  695  210  260    0  289  286  472  633  620 1253]
 [1469   29  406  499   29  289    0    3  761  922  331  964]
 [1472   26  409  496   26  286    3    0  758  919  334  967]
 [2230  732 1167  262  732  472  761  758    0  161 1092 1725]
 [2391  893 1328  423  893  633  922  919  161    0 1253 1886]
 [1138  360   75  830  360  620  331  334 1092 1253    0  633]
 [ 505  993  558 1463  993 1253  964  967 1725 1886  633    0]]
#+end_example

** 3-Dimensional Broadcasting
#+BEGIN_SRC jupyter-python  
A = np.array([ [[3, 4, 7], [5, 0, -1] , [2, 1, 5]],
      [[1, 0, -1], [8, 2, 4], [5, 2, 1]],
      [[2, 1, 3], [1, 9, 4], [5, -2, 4]]])

B = np.array([ [[3, 4, 7], [1, 0, -1], [1, 2, 3]] ])

B * A
#+END_SRC
#+RESULTS:
#+begin_example
array([[[ 9, 16, 49],
        [ 5,  0,  1],
        [ 2,  2, 15]],

       [[ 3,  0, -7],
        [ 8,  0, -4],
        [ 5,  4,  3]],

       [[ 6,  4, 21],
        [ 1,  0, -4],
        [ 5, -4, 12]]])
#+end_example


#+BEGIN_SRC jupyter-python  
B = np.array([1, 2, 3])

B = B[np.newaxis, :]
print(B.shape)
B = np.concatenate((B, B, B)).transpose()
print(B.shape)
B = B[:, np.newaxis]
print(B.shape)
print(B)

print(A * B)
#+END_SRC
#+RESULTS:
#+begin_example
(1, 3)
(3, 3)
(3, 1, 3)
[[[1 1 1]]

 [[2 2 2]]

 [[3 3 3]]]
[[[ 3  4  7]
  [ 5  0 -1]
  [ 2  1  5]]

 [[ 2  0 -2]
  [16  4  8]
  [10  4  2]]

 [[ 6  3  9]
  [ 3 27 12]
  [15 -6 12]]]
#+end_example

* Numpy Arrays: Concatenating, Flattening and Adding Dimensions
** Flatten and Reshape Arrays
- Flatten :: a ndarry method with an optional keyword parameter "order".
- Order can have the values "C", "F" and "A".
- The default of order is "C". "C" means to flatten C style in row-major ordering, i.e. the rightmost index "changes the fastest" or in other words: In row-major order, the row index varies the slowest, and the column index the quickest, so that a[0,1] follows [0,0].
- "F" stands for Fortran column-major ordering.
- "A" means preserve the the C/Fortran ordering. 
#+BEGIN_SRC jupyter-python  
import numpy as np

A = np.array([[[ 0,  1],
               [ 2,  3],
               [ 4,  5],
               [ 6,  7]],
              [[ 8,  9],
               [10, 11],
               [12, 13],
               [14, 15]],
              [[16, 17],
               [18, 19],
               [20, 21],
               [22, 23]]])

Flattened_X = A.flatten()
print(Flattened_X)

print(A.flatten(order="C"))
print(A.flatten(order="F"))
print(A.flatten(order="A"))
#+END_SRC
#+RESULTS:
: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]
: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]
: [ 0  8 16  2 10 18  4 12 20  6 14 22  1  9 17  3 11 19  5 13 21  7 15 23]
: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]

- Ravel :: ravel(a, order='C')
- The order of the elements in the array returned by ravel() is normally "C-style".
- ravel returns a flattened one-dimensional array. A copy is made only if needed.
- The optional keyword parameter "order" can be 'C','F', 'A', or 'K'
- 'C' :: C-like order, with the last axis index changing fastest, back to the first axis index changing slowest. "C" is the default!
- 'F' :: Fortran-like index order with the first index changing fastest, and the last index changing slowest.
- 'A' :: Fortran-like index order if the array "a" is Fortran contiguous in memory, C-like order otherwise.
- 'K' :: read the elements in the order they occur in memory, except for reversing the data when strides are negative.
#+BEGIN_SRC jupyter-python  
print(A.ravel())

print(A.ravel(order="A"))

print(A.ravel(order="F"))

print(A.ravel(order="A"))

print(A.ravel(order="K"))
#+END_SRC
#+RESULTS:
: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]
: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]
: [ 0  8 16  2 10 18  4 12 20  6 14 22  1  9 17  3 11 19  5 13 21  7 15 23]
: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]
: [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]

- Reshape :: reshape(a, newshape, order='C')
- reshape() :: gives a new shape to an array without changing its data, i.e. it returns a new array with a new shape.
| Parameter | Meaning                                 |
|-----------+-----------------------------------------|
| a         | array_like, Array to be reshaped.       |
| newshape  | int or tuple of ints                    |
| order     | 'C', 'F', 'A', like in flatten or ravel |

#+BEGIN_SRC jupyter-python  
X = np.array(range(24))
Y = X.reshape((3,4,2))
Y
#+END_SRC
#+RESULTS:
#+begin_example
array([[[ 0,  1],
        [ 2,  3],
        [ 4,  5],
        [ 6,  7]],

       [[ 8,  9],
        [10, 11],
        [12, 13],
        [14, 15]],

       [[16, 17],
        [18, 19],
        [20, 21],
        [22, 23]]])
#+end_example

** Concatenating Arrays
#+BEGIN_SRC jupyter-python  
x = np.array([11,22])
y = np.array([18,7,6])
z = np.array([1,3,5])
c = np.concatenate((x,y,z))
print(c)
#+END_SRC
#+RESULTS:
: [11 22 18  7  6  1  3  5]


#+BEGIN_SRC jupyter-python  
x = np.array(range(24))
x = x.reshape((3,4,2))
y = np.array(range(100,124))
y = y.reshape((3,4,2))
z = np.concatenate((x,y))
print(z)
#+END_SRC
#+RESULTS:
#+begin_example
[[[  0   1]
  [  2   3]
  [  4   5]
  [  6   7]]

 [[  8   9]
  [ 10  11]
  [ 12  13]
  [ 14  15]]

 [[ 16  17]
  [ 18  19]
  [ 20  21]
  [ 22  23]]

 [[100 101]
  [102 103]
  [104 105]
  [106 107]]

 [[108 109]
  [110 111]
  [112 113]
  [114 115]]

 [[116 117]
  [118 119]
  [120 121]
  [122 123]]]
#+end_example


#+BEGIN_SRC jupyter-python  
z = np.concatenate((x,y),axis = 1)
print(z)
#+END_SRC
#+RESULTS:
#+begin_example
[[[  0   1]
  [  2   3]
  [  4   5]
  [  6   7]
  [100 101]
  [102 103]
  [104 105]
  [106 107]]

 [[  8   9]
  [ 10  11]
  [ 12  13]
  [ 14  15]
  [108 109]
  [110 111]
  [112 113]
  [114 115]]

 [[ 16  17]
  [ 18  19]
  [ 20  21]
  [ 22  23]
  [116 117]
  [118 119]
  [120 121]
  [122 123]]]
#+end_example

** Adding New Dimensions
#+BEGIN_SRC jupyter-python  
x = np.array([2,5,18,14,4])
y = x[:, np.newaxis]
print(y)
#+END_SRC
#+RESULTS:
: [[ 2]
:  [ 5]
:  [18]
:  [14]
:  [ 4]]

** Vector Stacking
#+BEGIN_SRC jupyter-python  
A = np.array([3, 4, 5])
B = np.array([1, 9, 0])

print(np.row_stack((A, B)))

print(np.column_stack((A, B)))
np.shape(A)
#+END_SRC
#+RESULTS:
:RESULTS:
: [[3 4 5]
:  [1 9 0]]
: [[3 1]
:  [4 9]
:  [5 0]]
| 3 |
:END:


#+BEGIN_SRC jupyter-python 
A = np.array([[3, 4, 5],
              [1, 9, 0],
              [4, 6, 8]])
np.column_stack((A, A, A))
#+END_SRC
#+RESULTS:
: array([[3, 4, 5, 3, 4, 5, 3, 4, 5],
:        [1, 9, 0, 1, 9, 0, 1, 9, 0],
:        [4, 6, 8, 4, 6, 8, 4, 6, 8]])


#+BEGIN_SRC jupyter-python  
np.column_stack((A[0], A[0], A[0]))
#+END_SRC
#+RESULTS:
: array([[3, 3, 3],
:        [4, 4, 4],
:        [5, 5, 5]])


#+BEGIN_SRC jupyter-python  
np.dstack((A, A, A))
#+END_SRC
#+RESULTS:
#+begin_example
array([[[3, 3, 3],
        [4, 4, 4],
        [5, 5, 5]],

       [[1, 1, 1],
        [9, 9, 9],
        [0, 0, 0]],

       [[4, 4, 4],
        [6, 6, 6],
        [8, 8, 8]]])
#+end_example

** Repeating Patterns, The "tile" Method
- Tile :: tile(A, reps)
- An array is constructed by repeating A the number of times given by reps.
- 'reps' is usually a tuple (or list) which defines the number of repetitions along the corresponding axis / directions. if we set reps to (3, 4) for example, A will be repeated 3 times for the "rows" and 4 times in the direction of the columns.
#+BEGIN_SRC jupyter-python  
import numpy as np
x = np.array([ [1, 2], [3, 4]])
np.tile(x, (3,4))
#+END_SRC
#+RESULTS:
: array([[1, 2, 1, 2, 1, 2, 1, 2],
:        [3, 4, 3, 4, 3, 4, 3, 4],
:        [1, 2, 1, 2, 1, 2, 1, 2],
:        [3, 4, 3, 4, 3, 4, 3, 4],
:        [1, 2, 1, 2, 1, 2, 1, 2],
:        [3, 4, 3, 4, 3, 4, 3, 4]])


#+BEGIN_SRC jupyter-python  
import numpy as np

x = np.array([ 3.4])

y = np.tile(x, (5,)) 

print(y)
#+END_SRC
#+RESULTS:
: [3.4 3.4 3.4 3.4 3.4]


#+BEGIN_SRC jupyter-python  
import numpy as np
x = np.array([[1, 2], [3, 4]])
print(np.tile(x, 2))
#+END_SRC
#+RESULTS:
: [[1 2 1 2]
:  [3 4 3 4]]


#+BEGIN_SRC jupyter-python  
import numpy as np
x = np.array([[1, 2], [3, 4]])
print(np.tile(x, (2, 1)))
#+END_SRC
#+RESULTS:
: [[1 2]
:  [3 4]
:  [1 2]
:  [3 4]]


#+BEGIN_SRC jupyter-python  
import numpy as np
x = np.array([[1, 2], [3, 4]])
print(np.tile(x, (2, 2)))
#+END_SRC
#+RESULTS:
: [[1 2 1 2]
:  [3 4 3 4]
:  [1 2 1 2]
:  [3 4 3 4]]


#+BEGIN_SRC jupyter-python  

#+END_SRC

