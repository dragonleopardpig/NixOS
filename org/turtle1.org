#+PROPERTY: header-args:python :session

* Concentric Circles
#+BEGIN_SRC python
import turtle

turtle.clear()
turtle.reset()

turtle.shape("turtle")
turtle.width(5)
turtle.speed(10)
rainbow = [
    "red",
    "blue",
    "Tomato",
    "LawnGreen",
    "#1e90ff",
]

def concentricCircle(radius, step):
    counter = 0
    while counter < len(rainbow):
        turtle.color(rainbow[counter])
        # Draw Circle
        turtle.circle(radius + counter * step)
        # Reposition
        turtle.up()
        turtle.right(90)
        turtle.forward(step)
        turtle.left(90)
        turtle.down()
        # Reset counter
        counter = counter + 1

concentricCircle(radius=20, step=10)
#+END_SRC
#+RESULTS:
: None

* Concentric Square
#+BEGIN_SRC python
import turtle

turtle.clear()
turtle.reset()

turtle.shape("turtle")
turtle.width(5)
turtle.speed(10)
rainbow = [
    "red",
    "blue",
    "green",
    "magenta",
    "OliveDrab",
    "LawnGreen",
    "DodgerBlue",
    "SkyBlue",
    "SteelBlue",
    "Chocolate",
    "ForestGreen",
    "Aquamarine",
    "DarkSeaGreen",
    "PowderBlue",
    "Red2",
    "Red1",
    "Gainsboro",
    "Azure2",
]

def concentricSquare(length, step):
    counter = 0
    while counter < len(rainbow):
        turtle.color(rainbow[counter])
        # Draw square
        side = length + 2 * counter * step
        turtle.forward(side)
        turtle.left(90)
        turtle.forward(side)
        turtle.left(90)
        turtle.forward(side)
        turtle.left(90)
        turtle.forward(side)
        # Reposition
        turtle.up()
        turtle.forward(step)
        turtle.right(90)
        turtle.forward(step)
        turtle.left(180)
        turtle.down()
        # Reset counter
        counter = counter + 1

concentricSquare(length=10, step=10)
#+END_SRC
#+RESULTS:
: None

* Concentric Triangle
#+BEGIN_SRC python
import turtle
import math

turtle.clear()
turtle.reset()

turtle.shape("turtle")
turtle.width(3)
turtle.speed(10)
rainbow = [
    "red",
    "blue",
    "green",
    "magenta",
    "OliveDrab",
    "LawnGreen",
]

def concentricTriangle(length, step):
    counter = 0
    while counter < len(rainbow):
        turtle.color(rainbow[counter])
        # Draw triangle
        delta = step*math.tan(math.radians(30))
        side = length + 2*counter*(step + delta)
        turtle.forward(side)
        turtle.left(120)
        turtle.forward(side)
        turtle.left(120)
        turtle.forward(side)
        # Reposition
        turtle.up()
        turtle.left(30)
        turtle.forward(step)
        turtle.right(90)
        turtle.forward(step + delta)
        turtle.left(180)
        turtle.down()
        # Reset counter
        counter = counter + 1

concentricTriangle(length=100, step=20)
#+END_SRC
#+RESULTS:
: None

* Concentric Rectangle
#+BEGIN_SRC python
import turtle

turtle.clear()
turtle.reset()

turtle.shape("turtle") 
turtle.width(5)
turtle.speed(10)
rainbow = [
    "red",
    "blue",
    "green",
    "magenta",
    "OliveDrab",
    "LawnGreen",
    "DodgerBlue",
    "SkyBlue",
    "SteelBlue",
    "Chocolate",
    "ForestGreen",
    "Aquamarine",
    "DarkSeaGreen",
    "PowderBlue",
    "Red2",
    "Red1",
    "Gainsboro",
    "Azure2",
]

def concentricSquare(length1, length2, step):
    counter = 0
    while counter < len(rainbow):
        turtle.color(rainbow[counter])
        # Draw square
        side1 = length1 + 2 * counter * step
        side2 = length2 + 2 * counter * step
        turtle.forward(side1)
        turtle.left(90)
        turtle.forward(side2)
        turtle.left(90)
        turtle.forward(side1)
        turtle.left(90)
        turtle.forward(side2)
        # Reposition
        turtle.up()
        turtle.forward(step)
        turtle.right(90)
        turtle.forward(step)
        turtle.left(180)
        turtle.down()
        # Reset counter
        counter = counter + 1

concentricSquare(length1=50, length2=30, step=10)
#+END_SRC
#+RESULTS:
: None

* On-Click
#+BEGIN_SRC python
import turtle

turtle.home()
turtle.clear()

def setup():
    turtle.width(10)
    turtle.speed(10)
    turtle.color("red")

screen = turtle.Screen()
setup()

def point(i, j):
    setup()
    turtle.goto(i, j)
    turtle.write(str(i) + "," + str(j))

def clear_turtle(x, y):
    turtle.clear()
    turtle.reset()
    setup()

screen.onclick(clear_turtle, btn=2)
screen.onclick(point, btn=3)
screen.onclick(turtle.ondrag(turtle.goto), btn=1)
screen.listen()
screen.mainloop()
#+END_SRC
#+RESULTS:
: None

* TURTLE RACE
#+BEGIN_SRC python
import random, turtle

turtle.clearscreen()
# turtle.reset()

myscreen= turtle.Screen()

# myscreen.bgcolor('light blue')
# myscreen.setup(1.0,1.0)
myscreen.title('Turtle Race Game')

pen=turtle.Turtle()

pen.speed(0) # so it moves with fastest speed
pen.penup() #pen goes up as we don't want to draw on line.
pen.goto(-200,300) #this is x and y position from center of the screen
pen.pendown() # pen placed down again

for i in range(1,11): # this will run from 1 to 10 
	pen.write(i,font=('Arial',10)) #writing the race track number before each line
	pen.setheading(-90) #this will point pen in downward direction
	pen.forward(500) #draw a line of 250 pixels length.
	if i==10: # this if condition will be true only if the iterating variable is 10 
		pen.write(" FINISH",font=('Arial',14))
	pen.back(500) #goes back
	pen.penup() #pen goes up as we don't want to draw on line
	pen.setheading(0) #pen points in right direction
	pen.forward(50)  #space of 50 pixes between each line
	pen.down() #pen down again

finishLineX=250

def createTurtlePlayer(color, startx, starty): 
	player=turtle.Turtle()
	player.color(color) # set the color of turtle
	player.shape("turtle") #set the shape as turtle
	player.penup() #pen moves up
	player.goto(startx, starty) #place player at mentioned position on race track.
	player.pendown() #pen placed down
	return player #returns the turtle player object.

p1=createTurtlePlayer('red',-210,250) #red colored turtle at x position before 1st Line and y position 150
p2=createTurtlePlayer('blue',-210,200) #blue colored turtle at x position before 1st Line and y position 100
p3=createTurtlePlayer('orange',-210,150) #orange colored turtle at x position before 1st Line and y position 50
p4=createTurtlePlayer('green',-210,100) #green colored turtle at x position before 1st Line and y position 0
p5=createTurtlePlayer('yellow',-210,50) #red colored turtle at x position before 1st Line and y position 150
p6=createTurtlePlayer('indigo',-210,0) #blue colored turtle at x position before 1st Line and y position 100
p7=createTurtlePlayer('cyan',-210,-50) #orange colored turtle at x position before 1st Line and y position 50
p8=createTurtlePlayer('pink',-210,-100) #green colored turtle at x position before 1st Line and y position 0

while True:
	p1.forward(random.randint(5,10))
	if p1.pos()[0]>=finishLineX:
		p1.write('   I won the race!!',font=('Arial',20))
		break
	p2.forward(random.randint(5,10))
	if p2.pos()[0]>=finishLineX:
		p2.write('   I won the race!!',font=('Arial',20))
		break
	p3.forward(random.randint(5,10))
	if p3.pos()[0]>=finishLineX:
		p3.write('   I won the race!!',font=('Arial',20))
		break
	p4.forward(random.randint(5,10))
	if p4.pos()[0]>=finishLineX:
		p4.write('   I won the race!!',font=('Arial',20))
		break
	p5.forward(random.randint(5,10))
	if p5.pos()[0]>=finishLineX:
		p5.write('   I won the race!!',font=('Arial',20))
		break
	p6.forward(random.randint(5,10))
	if p6.pos()[0]>=finishLineX:
		p6.write('   I won the race!!',font=('Arial',20))
		break
	p7.forward(random.randint(5,10))
	if p7.pos()[0]>=finishLineX:
		p7.write('   I won the race!!',font=('Arial',20))
		break
	p8.forward(random.randint(5,10))
	if p8.pos()[0]>=finishLineX:
		p8.write('   I won the race!!',font=('Arial',20))
		break
# turtle.done()
#+END_SRC
#+RESULTS:
: None
