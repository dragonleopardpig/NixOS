#+STARTUP: content
#+PROPERTY: header-args:jupyter-python :session mysession

* Numpy Arrays - ndarray
** Creating NumPy Arrays
#+BEGIN_SRC jupyter-python
import numpy as np

# Create a 1D array

arr_1d = np.array([1, 2, 3, 4, 5])

print("1D Array:")
print(arr_1d)

# Create a 2D array (matrix)

arr_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print("\n2D Array:")
print(arr_2d)
#+END_SRC

#+RESULTS:
: 1D Array:
: [1 2 3 4 5]
: 
: 2D Array:
: [[1 2 3]
:  [4 5 6]
:  [7 8 9]]

** Array Attributes
#+BEGIN_SRC jupyter-python  
import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6]])

print("Array Shape:", arr.shape)
print("Array Size:", arr.size)
print("Array Data Type:", arr.dtype)
#+END_SRC

#+RESULTS:
: Array Shape: (2, 3)
: Array Size: 6
: Array Data Type: int64

** Array Indexing
#+BEGIN_SRC jupyter-python  
import numpy as np

arr = np.array([1, 2, 3, 4, 5])

print("First Element:", arr[0]) # Accessing the first element
print("Last Element:", arr[-1]) # Accessing the last element
print("Third Element:", arr_1d[2])      # Accessing the third element
#+END_SRC

#+RESULTS:
: First Element: 1
: Last Element: 5
: Third Element: 3


#+BEGIN_SRC jupyter-python  
import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6]])

print("Element at row 1, column 2:", arr[0, 1]) # Accessing an element
#+END_SRC

#+RESULTS:
: Element at row 1, column 2: 2

#+BEGIN_SRC jupyter-python
import numpy as np

# Creating a 2D array

arr_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Accessing elements in a 2D array
print("Element at row 1, column 2:", arr_2d[0, 1])   # Accessing an element
print("Entire second row:", arr_2d[1])               # Accessing an entire row
#+END_SRC

#+RESULTS:
: Element at row 1, column 2: 2
: Entire second row: [4 5 6]

** Integer Array Indexing
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array
arr_1d = np.array([1, 2, 3, 4, 5])

# Indexing with an array of indices
indices = np.array([0, 2, 4])

selected_elements = arr_1d[indices]

print("Selected Elements using Indices:", selected_elements)
#+END_SRC

#+RESULTS:
: Selected Elements using Indices: [1 3 5]

** Boolean Indexing
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array
arr_1d = np.array([1, 2, 3, 4, 5])

# Boolean indexing
mask = arr_1d > 2

selected_elements = arr_1d[mask]

print("Selected Elements using Boolean Indexing:", selected_elements)
#+END_SRC

#+RESULTS:
: Selected Elements using Boolean Indexing: [3 4 5]

** Modifying Array Elements
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array
arr_1d = np.array([1, 2, 3, 4, 5])

# Modifying elements
arr_1d[1] = 10

# Modifying elements using slicing
arr_1d[2:4] = [20, 30]

print("Modified Array:", arr_1d)
print("Array after Slicing and Modification:", arr_1d)
#+END_SRC

#+RESULTS:
: Modified Array: [ 1 10 20 30  5]
: Array after Slicing and Modification: [ 1 10 20 30  5]

** Working with Views vs. Copies
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array
arr_1d = np.array([1, 2, 3, 4, 5])

# Creating a slice view
slice_view = arr_1d[2:5]

slice_view[:] = 100  # Modifying the view

print("Original Array after Modifying Slice View:", arr_1d)
#+END_SRC

#+RESULTS:
: Original Array after Modifying Slice View: [  1   2 100 100 100]

** Array Slicing
#+BEGIN_SRC jupyter-python  
import numpy as np

arr = np.array([1, 2, 3, 4, 5])

print("Slice elements from index 1 to 3:", arr[1:4])    # Slicing elements

arr_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

print("\nSliced 2D array:")
print(arr_2d[:2, 1:])   # Slicing a 2D array
#+END_SRC

#+RESULTS:
: Slice elements from index 1 to 3: [2 3 4]
: 
: Sliced 2D array:
: [[2 3]
:  [5 6]]

#+BEGIN_SRC jupyter-python
import numpy as np

# Creating a 1D array
arr_1d = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Slicing elements from index 2 to 5
sliced_arr = arr_1d[2:6]

# Slicing with a step of 2
step_slice = arr_1d[1:9:2]

print("Sliced Array:", sliced_arr)
print("Sliced Array with Step:", step_slice)
#+END_SRC

#+RESULTS:
: Sliced Array: [3 4 5 6]
: Sliced Array with Step: [2 4 6 8]


#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 2D array
arr_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Slicing a 2D array
sliced_2d = arr_2d[:2, 1:]

print("Sliced 2D Array:")
print(sliced_2d)
#+END_SRC

#+RESULTS:
: Sliced 2D Array:
: [[2 3]
:  [5 6]]

** Arithmetic Operations
#+BEGIN_SRC jupyter-python  
import numpy as np

arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

# Element-wise addition
addition = arr1 + arr2
print("Element-wise addition:", addition)

# Element-wise multiplication
multiplication = arr1 * arr2
print("Element-wise multiplication:", multiplication)

# Matrix multiplication (dot product)
matrix_mul = np.dot(arr1, arr2)
print("Matrix multiplication (dot product):", matrix_mul)
#+END_SRC

#+RESULTS:
: Element-wise addition: [5 7 9]
: Element-wise multiplication: [ 4 10 18]
: Matrix multiplication (dot product): 32

** Aggregation Functions
#+BEGIN_SRC jupyter-python  
import numpy as np

arr = np.array([1, 2, 3, 4, 5])

# Calculating sum, mean, maximum, and minimum

print("Sum:", np.sum(arr))
print("Mean:", np.mean(arr))
print("Maximum value:", np.max(arr))
print("Minimum value:", np.min(arr))
#+END_SRC

#+RESULTS:
: Sum: 15
: Mean: 3.0
: Maximum value: 5
: Minimum value: 1

** Broadcasting in NumPy
#+BEGIN_SRC jupyter-python  
import numpy as np

arr1 = np.array([[1, 2, 3], [4, 5, 6]])
scalar = 2

# Element-wise multiplication of array and scalar
result = arr1 * scalar

print("Broadcasting Example:")
print(result)
#+END_SRC

#+RESULTS:
: Broadcasting Example:
: [[ 2  4  6]
:  [ 8 10 12]]

** Universal Functions (ufuncs)
#+BEGIN_SRC jupyter-python  
import numpy as np

arr = np.array([1, 2, 3, 4])

# Square root of each element
sqrt_arr = np.sqrt(arr)

print("Square root of array elements:")
print(sqrt_arr)

# Exponential function
exp_arr = np.exp(arr)

print("\nExponential of array elements:")
print(exp_arr)
#+END_SRC

#+RESULTS:
: Square root of array elements:
: [1.         1.41421356 1.73205081 2.        ]
: 
: Exponential of array elements:
: [ 2.71828183  7.3890561  20.08553692 54.59815003]

** Reshaping Arrays
#+BEGIN_SRC jupyter-python  
import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6]])

# Reshaping the array to a different shape
reshaped_arr = arr.reshape(3, 2)

print("Reshaped Array:")
print(reshaped_arr)
#+END_SRC

#+RESULTS:
: Reshaped Array:
: [[1 2]
:  [3 4]
:  [5 6]]

** Stacking Arrays
#+BEGIN_SRC jupyter-python  
import numpy as np

arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

# Stacking arrays vertically and horizontally
vertical_stack = np.vstack((arr1, arr2))
horizontal_stack = np.hstack((arr1, arr2))

print("Vertical Stack:")
print(vertical_stack)
print("\nHorizontal Stack:")
print(horizontal_stack)
#+END_SRC

#+RESULTS:
: Vertical Stack:
: [[1 2 3]
:  [4 5 6]]
: 
: Horizontal Stack:
: [1 2 3 4 5 6]

** Splitting Arrays
#+BEGIN_SRC jupyter-python  
import numpy as np

arr = np.array([1, 2, 3, 4, 5, 6])

# Splitting the array into three parts
split_arr = np.split(arr, 3)

print("Split Array:")
print(split_arr)
#+END_SRC

#+RESULTS:
: Split Array:
: [array([1, 2]), array([3, 4]), array([5, 6])]

* NumPy - Creating Arrays
** np.array()
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array from a list
arr_1d = np.array([1, 2, 3, 4, 5])

# Creating a 2D array from a nested list
arr_2d = np.array([[1, 2, 3], [4, 5, 6]])

print("1D Array:")
print(arr_1d)

print("\n2D Array:")
print(arr_2d)
#+END_SRC

#+RESULTS:
: 1D Array:
: [1 2 3 4 5]
: 
: 2D Array:
: [[1 2 3]
:  [4 5 6]]

** np.zeros()
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array filled with zeros
zeros_1d = np.zeros(5)

# Creating a 2D array (matrix) filled with zeros
zeros_2d = np.zeros((3, 4))

print("1D Array with Zeros:")
print(zeros_1d)

print("\n2D Array with Zeros:")
print(zeros_2d)
#+END_SRC

#+RESULTS:
: 1D Array with Zeros:
: [0. 0. 0. 0. 0.]
: 
: 2D Array with Zeros:
: [[0. 0. 0. 0.]
:  [0. 0. 0. 0.]
:  [0. 0. 0. 0.]]

** np.ones()
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array filled with ones
ones_1d = np.ones(5)

# Creating a 2D array (matrix) filled with ones
ones_2d = np.ones((3, 4))

print("1D Array with Ones:")
print(ones_1d)

print("\n2D Array with Ones:")
print(ones_2d)
#+END_SRC

#+RESULTS:
: 1D Array with Ones:
: [1. 1. 1. 1. 1.]
: 
: 2D Array with Ones:
: [[1. 1. 1. 1.]
:  [1. 1. 1. 1.]
:  [1. 1. 1. 1.]]

** np.arange()
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array with a range of values
arr_range = np.arange(1, 10, 2)  # Start, Stop, Step

print("1D Array with a Range of Values:")
print(arr_range)
#+END_SRC

#+RESULTS:
: 1D Array with a Range of Values:
: [1 3 5 7 9]

** np.linspace()
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array with evenly spaced values
arr_linspace = np.linspace(1, 5, 10)  # Start, Stop, Number of elements

print("1D Array with Evenly Spaced Values:")
print(arr_linspace)
#+END_SRC

#+RESULTS:
: 1D Array with Evenly Spaced Values:
: [1.         1.44444444 1.88888889 2.33333333 2.77777778 3.22222222
:  3.66666667 4.11111111 4.55555556 5.        ]

** np.eye()
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 2D identity matrix
identity_matrix = np.eye(3)

print("Identity Matrix:")
print(identity_matrix)
#+END_SRC

#+RESULTS:
: Identity Matrix:
: [[1. 0. 0.]
:  [0. 1. 0.]
:  [0. 0. 1.]]

** np.random.rand() and np.random.randn()
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array with random values from a uniform distribution
random_array_uniform = np.random.rand(5)

print("1D Array with Random Values (Uniform Distribution):")
print(random_array_uniform)
#+END_SRC

#+RESULTS:
: 1D Array with Random Values (Uniform Distribution):
: [0.70226954 0.62505787 0.93593329 0.92693315 0.71534452]


#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array with random values from a standard normal distribution
random_array_normal = np.random.randn(5)

print("1D Array with Random Values (Standard Normal Distribution):")

print(random_array_normal)
#+END_SRC

#+RESULTS:
: 1D Array with Random Values (Standard Normal Distribution):
: [ 0.46562866  1.78403017 -1.79059035  0.04572266 -0.309668  ]

** Creating Arrays with Specific Data Types
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating an array with a specific data type
arr_float = np.array([1, 2, 3], dtype=float)

print("Array with Float Data Type:")
print(arr_float)
#+END_SRC

#+RESULTS:
: Array with Float Data Type:
: [1. 2. 3.]

* Understanding Array Properties
#+BEGIN_SRC jupyter-python  
import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6]])

# Getting array 
print("Array Shape:", arr.shape)
print("Array Size:", arr.size)
print("Array Data Type:", arr.dtype)
print("Array Dimension:", arr.ndim)
#+END_SRC

#+RESULTS:
: Array Shape: (2, 3)
: Array Size: 6
: Array Data Type: int64
: Array Dimension: 2

* NumPy Array Indexing
** Accessing Elements
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array
arr_1d = np.array([1, 2, 3, 4, 5])

# Accessing elements in a 1D array
print("First Element:", arr_1d[0]) # Accessing the first element

print("Last Element:", arr_1d[-1]) # Accessing the last element

print("Third Element:", arr_1d[2]) # Accessing the third element
#+END_SRC

#+RESULTS:
: First Element: 1
: Last Element: 5
: Third Element: 3

** Indexing Multi-Dimensional Arrays
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 2D array
arr_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Accessing elements in a 2D array
print("Element at row 1, column 2:", arr_2d[0, 1]) # Accessing an element

print("Entire second row:", arr_2d[1]) # Accessing an entire row
#+END_SRC

#+RESULTS:
: Element at row 1, column 2: 2
: Entire second row: [4 5 6]

* Array Slicing in NumPy
** Slicing 1D Arrays
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array
arr_1d = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

# Slicing elements from index 2 to 5
sliced_arr = arr_1d[2:6]

print("Sliced Array:", sliced_arr)

# Slicing with a step of 2
step_slice = arr_1d[1:9:2]

print("Sliced Array with Step:", step_slice)
#+END_SRC

#+RESULTS:
: Sliced Array: [3 4 5 6]
: Sliced Array with Step: [2 4 6 8]

** Slicing Multi-Dimensional Arrays
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 2D array
arr_2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Slicing a 2D array
sliced_2d = arr_2d[:2, 1:]

print("Sliced 2D Array:")

print(sliced_2d)
#+END_SRC

#+RESULTS:
: Sliced 2D Array:
: [[2 3]
:  [5 6]]

* Advanced Indexing Techniques
** Integer Array Indexing
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array
arr_1d = np.array([1, 2, 3, 4, 5])

# Indexing with an array of indices
indices = np.array([0, 2, 4])

selected_elements = arr_1d[indices]

print("Selected Elements using Indices:", selected_elements)
#+END_SRC

#+RESULTS:
: Selected Elements using Indices: [1 3 5]

** Boolean Indexing
#+BEGIN_SRC jupyter-python  
import numpy as np

# Creating a 1D array
arr_1d = np.array([1, 2, 3, 4, 5])

# Boolean indexing
mask = arr_1d > 2

selected_elements = arr_1d[mask]

print("Selected Elements using Boolean Indexing:", selected_elements)
#+END_SRC

#+RESULTS:
: Selected Elements using Boolean Indexing: [3 4 5]


#+BEGIN_SRC jupyter-python  

#+END_SRC

